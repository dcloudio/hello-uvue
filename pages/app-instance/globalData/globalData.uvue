<template>
	<!-- #ifdef APP -->
	<scroll-view style="flex:1;padding-bottom: 20px;">
	<!-- #endif -->
		<view>
			<view class="uni-padding-wrap">
				<button @click="getGlobalData">get globalData</button>
				<template v-if="originGlobalData.str.length">
					<text class="uni-common-mt bold">初始的 globalData:</text>
					<text class="uni-common-mt">globalData string: {{ originGlobalData.str }}</text>
					<text class="uni-common-mt">globalData number: {{ originGlobalData.num }}</text>
					<text class="uni-common-mt">globalData boolean: {{ originGlobalData.bool }}</text>
					<text class="uni-common-mt">globalData object: {{ originGlobalData.obj }}</text>
					<text class="uni-common-mt">globalData null: {{ originGlobalData.null }}</text>
					<text class="uni-common-mt">globalData array: {{ originGlobalData.arr }}</text>
					<text class="uni-common-mt">globalData Set: {{ originGlobalData.mySet }}</text>
					<text class="uni-common-mt">globalData Map: {{ originGlobalData.myMap }}</text>
					<text class="uni-common-mt">globalData func 返回值: {{ originGlobalDataFuncRes }}</text>
				</template>
				<button @click="setGlobalData" class="uni-common-mt">set globalData</button>
				<template v-if="newGlobalData.bool">
					<text class="uni-common-mt bold">更新后的 globalData:</text>
					<text class="uni-common-mt">globalData string: {{ newGlobalData.str }}</text>
					<text class="uni-common-mt">globalData number: {{ newGlobalData.num }}</text>
					<text class="uni-common-mt">globalData boolean: {{ newGlobalData.bool }}</text>
					<text class="uni-common-mt">globalData object: {{ newGlobalData.obj }}</text>
					<text class="uni-common-mt">globalData null: {{ newGlobalData.null }}</text>
					<text class="uni-common-mt">globalData array: {{ newGlobalData.arr }}</text>
					<text class="uni-common-mt">globalData Set: {{ newGlobalData.mySet }}</text>
					<text class="uni-common-mt">globalData Map: {{ newGlobalData.myMap }}</text>
					<text class="uni-common-mt">globalData func 返回值: {{ newGlobalDataFuncRes }}</text>
				</template>
			</view>
		</view>
	<!-- #ifdef APP -->
	</scroll-view>
	<!-- #endif -->
</template>

<script lang="uts">
	type MyGlobalData = {
		str : string,
		num : number,
		bool : boolean,
		obj : UTSJSONObject,
		null : string | null,
		arr : number[],
		mySet : string[],
		myMap : UTSJSONObject,
		func : () => string
	}
	import { state, setLifeCycleNum } from '@/store/index.uts'

	export default {
		data() {
			return {
				originGlobalData: {
					str: '',
					num: 0,
					bool: false,
					obj: {
						str: '',
						num: 0,
						bool: false
					} as UTSJSONObject,
					null: null,
					arr: [] as number[],
					mySet: [] as string[],
					myMap: {},
					func: () : string => ''
				} as MyGlobalData,
				originGlobalDataFuncRes: '',
				newGlobalData: {
					str: '',
					num: 0,
					bool: false,
					obj: {
						str: '',
						num: 0,
						bool: false
					} as UTSJSONObject,
					null: null,
					arr: [] as number[],
					mySet: [] as string[],
					myMap: {},
					func: () : string => ''
				} as MyGlobalData,
				newGlobalDataFuncRes: '',
				lifeCycleNum: 0,
			}
		},
		onReady() {
			this.lifeCycleNum = state.lifeCycleNum
		},
		methods: {
			getGlobalData() {
				const app = getApp()
				this.originGlobalData.str = app.globalData.str
				this.originGlobalData.num = app.globalData.num
				this.originGlobalData.bool = app.globalData.bool
				this.originGlobalData.obj = app.globalData.obj
				this.originGlobalData.null = app.globalData.null
				this.originGlobalData.arr = app.globalData.arr
				app.globalData.mySet.forEach(value => {
					this.originGlobalData.mySet.push(value)
				})
				app.globalData.myMap.forEach((value, key) => {
					this.originGlobalData.myMap[key] = value
				})
				this.originGlobalData.func = app.globalData.func
				this.originGlobalDataFuncRes = this.originGlobalData.func()
			},
			setGlobalData() {
				const app = getApp()

				app.globalData.str = 'new globalData str'
				app.globalData.num = 100
				app.globalData.bool = true
				app.globalData.obj = {
					str: 'new globalData obj str',
					num: 200,
					bool: true
				}
				app.globalData.null = 'not null'
				app.globalData.arr = [1, 2, 3]
				app.globalData.mySet = new Set(['a', 'b', 'c'])
				app.globalData.myMap = new Map([
					['a', 1],
					['b', 2],
					['c', 3]
				])
				app.globalData.func = () : string => {
					return 'new globalData func'
				}

				this.newGlobalData.str = app.globalData.str
				this.newGlobalData.num = app.globalData.num
				this.newGlobalData.bool = app.globalData.bool
				this.newGlobalData.obj = app.globalData.obj
				this.newGlobalData.null = app.globalData.null
				this.newGlobalData.arr = app.globalData.arr
				app.globalData.mySet.forEach(value => {
					this.newGlobalData.mySet.push(value)
				})
				app.globalData.myMap.forEach((value, key) => {
					this.newGlobalData.myMap[key] = value
				})
				this.newGlobalData.func = app.globalData.func
				this.newGlobalDataFuncRes = this.newGlobalData.func()
			},
		},
	}
</script>

<style>
	.uni-padding-wrap {
		padding: 10px;
	}

	.bold {
		font-weight: bold;
	}

	.hr {
		border-bottom: 1px solid #ccc;
	}
</style>