<template>
  <!-- #ifdef APP -->
  <scroll-view style="flex: 1" :bounces="false">
    <!-- #endif -->
    <view class="page container">
      <view class="item-container">
        <text>onLoad 触发：</text>
        <text>{{ isOnloadTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onShow 触发：</text>
        <text>{{ isOnShowTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onReady 触发：</text>
        <text>{{ isOnReadyTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onPullDownRefresh 触发：</text>
        <text>{{ isOnPullDownRefreshTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onReachBottom 触发：</text>
        <text>{{ isOnReachBottomTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onBackPress 触发：</text>
        <text>{{ isOnBackPressTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onHide 触发：</text>
        <text>{{ isOnHideTriggered }}</text>
      </view>
      <view class="item-container">
        <text>onResize 触发：</text>
        <text>{{ isOnResizeTriggered }}</text>
      </view>
      <button class="uni-common-mt" @click="scrollToBottom">
        scrollToBottom
      </button>
      <button class="uni-common-mt" @click="pullDownRefresh">
        trigger pullDownRefresh
      </button>
    </view>
    <!-- #ifdef APP -->
  </scroll-view>
  <!-- #endif -->
</template>

<script lang="uts">
import { state, setLifeCycleNum } from '@/store/index.uts'

export default {
  data() {
    return {
      isScrolled: false,
      isOnloadTriggered: false,
      isOnShowTriggered: false,
      isOnReadyTriggered: false,
      isOnPullDownRefreshTriggered: false,
      isOnPageScrollTriggered: false,
      isOnReachBottomTriggered: false,
      isOnBackPressTriggered: false,
      isOnHideTriggered: false,
      isOnResizeTriggered: false,
    }
  },
  onLoad(_ : OnLoadOptions) {
    this.isOnloadTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum + 100)
  },
  onShow() {
    this.isOnShowTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum + 10)
  },
  onReady() {
    this.isOnReadyTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum + 10)
  },
  onPullDownRefresh() {
    this.isOnPullDownRefreshTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum + 10)
  },
  onPageScroll(_) {
    this.isOnPageScrollTriggered = true
    // 自动化测试
    this.isScrolled = true
  },
  onReachBottom() {
    this.isOnReachBottomTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum + 10)
  },
  onBackPress(_ : OnBackPressOptions) : boolean | null {
    this.isOnBackPressTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum - 10)
    return null
  },
  onHide() {
    this.isOnHideTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum - 10)
  },
  onUnload() {
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum - 100)
  },
  onResize(_){
    this.isOnResizeTriggered = true
    // 自动化测试
    setLifeCycleNum(state.lifeCycleNum + 10)
  },
  methods: {
    // 自动化测试
    getLifeCycleNum() : number {
      return state.lifeCycleNum
    },
    // 自动化测试
    setLifeCycleNum(num : number) {
      setLifeCycleNum(num)
    },
    // 自动化测试
    pullDownRefresh() {
      uni.startPullDownRefresh({
        success() {
          setTimeout(() => {
            uni.stopPullDownRefresh()
            // 一秒后立即停止下拉刷新不会触发 onPullDownRefresh，因为下拉动画时间大概需要1.1～1.2秒
          }, 1500)
        },
      })
    },
    scrollToBottom() {
      uni.pageScrollTo({
        scrollTop: 2000,
      })
    },
  },
}
</script>

<style>
.container {
  height: 1200px;
}
.item-container {
  margin-bottom: 10px;
  display: flex;
  justify-content: space-between;
  flex-direction: row;
}
</style>
