<template>
	<!-- #ifdef APP -->
	<scroll-view style="flex: 1" :bounces="false">
	<!-- #endif -->
		<view class="page container">
			<text>page lifecycle 选项式 API</text>
			<button class="mt-10" @click="scrollToBottom">scrollToBottom</button>
		</view>
	<!-- #ifdef APP -->
	</scroll-view>
	<!-- #endif -->
</template>

<script lang="uts">
	import { state, setLifeCycleNum } from '@/store/index.uts'
  type DataInfo = {
  	isScrolled: boolean
  }
	export default {
		data() {
			return {
				dataInfo: {
          isScrolled: false,
        } as DataInfo
			}
		},
		onLoad(_ : OnLoadOptions) {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum + 100)
		},
		onShow() {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum + 10)
		},
		onReady() {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum + 10)
		},
		onPullDownRefresh() {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum + 10)
		},
		onPageScroll(_) {
			// 自动化测试
			this.dataInfo.isScrolled = true
		},
		onReachBottom() {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum + 10)
		},
		onBackPress(_ : OnBackPressOptions) : boolean | null {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum - 10)
			return null
		},
		onHide() {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum - 10)
		},
		onUnload() {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum - 100)
		},
		onResize(_) {
			// 自动化测试
			setLifeCycleNum(state.lifeCycleNum + 10)
		},
		methods: {
			// 自动化测试
			pageGetLifeCycleNum() : number {
				return state.lifeCycleNum
			},
			// 自动化测试
			pageSetLifeCycleNum(num : number) {
				setLifeCycleNum(num)
			},
			// 自动化测试
			pullDownRefresh() {
				uni.startPullDownRefresh({
					success() {
						setTimeout(() => {
							uni.stopPullDownRefresh()
							// 一秒后立即停止下拉刷新不会触发 onPullDownRefresh，因为下拉动画时间大概需要1.1～1.2秒
						}, 1500)
					},
				})
			},
			scrollToBottom() {
				uni.pageScrollTo({
					scrollTop: 2000,
				})
			},
		},
	}
</script>

<style>
	.container {
		height: 1200px;
	}
</style>